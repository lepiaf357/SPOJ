#+TODO: TODO(t) | DONE(d)
#+TODO: IN_PROGRESS(i) OPENED(o)
#+TAGS: algorithms spoj books tutorial CPP
#+TAGS: dynamic_programming binary_search dfs bfs math combinatorics probability ad_hoc loops 


* TODO Algorithms                                                                                           :algorithms:
** TODO SPOJ Problems                                                                                             :spoj:
*** IN_PROGRESS Old [57%] :dynamic_programming:binary_search:ad_hoc:combinatorics:
    * [X] http://www.spoj.com/problems/BYTESM2/
    * [X] http://www.spoj.com/problems/AGGRCOW/
    * [ ] http://www.spoj.com/problems/HPYNOS/
    * [ ] http://www.spoj.com/problems/HUBULLU/
    * [X] http://www.spoj.com/problems/PIGBANK/
    * [X] http://www.spoj.com/problems/TRT/
    * [X] http://www.spoj.com/problems/PARTY/
    * [ ] http://www.spoj.com/problems/MARBLES/
    * [ ] http://www.spoj.com/problems/PT07Z/
    * [ ] http://www.spoj.com/problems/INVCNT/
    * [ ] http://www.spoj.com/problems/PT07Y/
    * [X] http://www.spoj.com/problems/ACODE/
    * [X] http://www.spoj.com/problems/CANDY3/
    * [X] http://www.spoj.com/problems/COINS/
      * Note :: there is some global constatn used in recursive and memoized versions of the program. Not shure what the purpose of it is.
*** OPENED New
    * [X] http://www.spoj.com/problems/ENIGMATH/
      #+BEGIN_SRC C
        long long nzd(long long a, long long b)
        {
                long long tmp;

                while (b != 0)
                {
                        tmp = b;
                        b = a % b;
                        a = tmp;
                }

                return a;
        }
        int main()
        {
                int t;
                long long a, b;
                scanf("%d", &t);
                while (t != 0)
                {
                        scanf("%lld%lld", &a, &b);
                        printf("%lld %lld\n", b / nzd(a, b), a / nzd(a, b));
                        t--;
                }
                return 0;
        }

        /* Jer ax - by = 0
           pa ax = by
           pa podeljeno sa a: x = b/a * y
           pa podeljeno sa y: x/y = b/a
           posto x i y treba da budu min, trazis nzd za b i a i onda ih skratis sa tim brojem i dobices minimalno
           Npr: 4/12 pa je nzd 4 pa podelis oba i dobijes 1/3 i onda je x = 1, a y = 3 :) :) :)
        ,*/
      #+END_SRC
    * [X] http://www.spoj.com/problems/FAVDICE/
    * [X] http://www.spoj.com/problems/PHONELST/
    * [X] http://www.spoj.com/problems/GSS1/
      * Note :: Hard problem. Few new concepts.
    * [X] http://www.spoj.com/problems/HOTELS/
    * [ ] http://www.spoj.com/problems/ARRAYSUB/
    * [X] http://www.spoj.com/problems/MISERMAN/
    * [X] http://www.spoj.com/problems/MIXTURES/
    * [X] http://www.spoj.com/problems/SBANK/
    * [X] http://www.spoj.com/problems/AIBOHP/
    * [X] http://www.spoj.com/problems/NHAY/
      * Able to pass with KR solution
    * [ ] http://www.spoj.com/problems/JAVAC/
    * [X] http://www.spoj.com/problems/ETF/
    * [X] http://www.spoj.com/problems/FARIDA/
    * [ ] http://www.spoj.com/problems/GSS3/
    * [X] http://www.spoj.com/problems/HORRIBLE/
    * [X] http://www.spoj.com/problems/DANGER/

** TODO Topcoder
*** TODO Get started
    * [ ] Create an account
    * [ ] Go through introduction
** TODO Text Books, Tutorials                                                                            :tutorial:books:
   * The Algorithm Design Manual [[http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1849967202][amazon_link]]
   * Topcoder tutorials [[https://www.topcoder.com/community/data-science/data-science-tutorials/][tutorials]] [1/4]
     + [ ] Binary serach [[https://www.topcoder.com/community/data-science/data-science-tutorials/binary-search/][binary search]]
     + [ ] Graphs [[https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-graphs-and-their-data-structures-section-1/][graphs]]
       + [ ] DFS
       + [ ] BFS
     + [X] Segmented trees [[https://www.topcoder.com/community/data-science/data-science-tutorials/range-minimum-query-and-lowest-common-ancestor/#Segment_Trees][sgm_tree]]
       + https://github.com/t3nsor/SPOJ/blob/master/gss3.cpp
       + http://www.geeksforgeeks.org/segment-tree-set-1-sum-of-given-range/
         + [X] Lazy segmented tree
           + http://www.geeksforgeeks.org/lazy-propagation-in-segment-tree/
             1) If current segment tree node has any pendind update, than first add that pending update to the current node.
             2) If the current node's range lies completley in update quaery range:
                1) Update current node
                2) Postpone updates to children by setting lazy value to childrens nodes
             3) If current nodes range overlaps with update range, follow the simple approach as aboves simple update:
                1) Recur for left and right children
                2) Update current node with the results from the left and right
           + http://se7so.blogspot.rs/2012/12/segment-trees-and-lazy-propagation.html
     + [ ] 
** IN_PROGRESS Needed algorithms
   + [ ] Binary Search
     - [ ] Write about the main and abstracted algorithm in the textbook. With examples.
   + [ ] Segmented trees
   + [X] Maximum subarray problem. [[www.ics.uci.edu/~goodrich/teach/cs161/notes/MaxSubarray.pdf][max_subarray]]
** TODO Switch to C++                                                                                              :CPP:
   + This is started with small changes:
     1. Switched to g++ compiler instead of gcc
     2. Using corresponding c++ headers instead of c headers
     3. Introducing vectors and reference passing to arguments
